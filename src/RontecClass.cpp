
static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Instrumentation/Rontec/src/RontecClass.cpp,v 1.1.1.1 2005-09-30 12:13:34 syldup Exp $";

static const char *TagName = "$Name: not supported by cvs2svn $";

static const char *FileName= "$Source: /users/chaize/newsvn/cvsroot/Instrumentation/Rontec/src/RontecClass.cpp,v $"; 

static const char *HttpServer= "http://controle/DeviceServer/doc/";

static const char *RCSfile = "$RCSfile: RontecClass.cpp,v $"; 

//+=============================================================================
//
// file : 			 RontecClass.cpp
//
// description : C++ source for the RontecClass. A singleton
//							 class derived from DeviceClass. It implements the
//							 command list and all properties and methods required
//							 by the Rontec once per process.
//
// project :		 TANGO Device Server
//
// $Author: syldup $
//
// $Revision: 1.1.1.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft : 		Synchrotron SOLEIL
//								L'Orme des Merisiers
//								Saint-Aubin - BP 48
//
//-=============================================================================
//
//			This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//				 (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <Rontec.h>
#include <RontecClass.h>


namespace Rontec_ns
{
//+----------------------------------------------------------------------------
//
// method : 		SendRontecMessageClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SendRontecMessageClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SendRontecMessageClass::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->send_rontec_message(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SetEnergyRangeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetEnergyRangeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetEnergyRangeClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_energy_range(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetAcquisitionTimeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetAcquisitionTimeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetAcquisitionTimeClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_acquisition_time());
}

//+----------------------------------------------------------------------------
//
// method : 		SetReadSizeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetReadSizeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetReadSizeClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_read_size(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetPauseStatusClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPauseStatusClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPauseStatusClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_pause_status());
}

//+----------------------------------------------------------------------------
//
// method : 		GetOffsetGainClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetOffsetGainClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetOffsetGainClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_offset_gain());
}

//+----------------------------------------------------------------------------
//
// method : 		GetEnergyRangeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetEnergyRangeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetEnergyRangeClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_energy_range());
}

//+----------------------------------------------------------------------------
//
// method : 		GetPartOfSpectrumClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPartOfSpectrumClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPartOfSpectrumClass::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->get_part_of_spectrum(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		GetCycleTimeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetCycleTimeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetCycleTimeClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_cycle_time());
}

//+----------------------------------------------------------------------------
//
// method : 		GetDeadTimeClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetDeadTimeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetDeadTimeClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_dead_time());
}

//+----------------------------------------------------------------------------
//
// method : 		GetOutputCountRateClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetOutputCountRateClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetOutputCountRateClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_output_count_rate());
}

//+----------------------------------------------------------------------------
//
// method : 		GetInputCountRateClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetInputCountRateClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetInputCountRateClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_input_count_rate());
}

//+----------------------------------------------------------------------------
//
// method : 		GetDetectorTemperatureClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetDetectorTemperatureClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetDetectorTemperatureClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_detector_temperature());
}

//+----------------------------------------------------------------------------
//
// method : 		SetSpeedAndResolutionConfigurationClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetSpeedAndResolutionConfigurationClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetSpeedAndResolutionConfigurationClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_speed_and_resolution_configuration(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		InitSerialLineClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *InitSerialLineClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "InitSerialLineClass::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->init_serial_line());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ClearClass::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ClearClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ClearClass::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->clear());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ResetClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ResetClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ResetClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->reset());
}

//+----------------------------------------------------------------------------
//
// method : 		GetROIDataClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetROIDataClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetROIDataClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->get_roi_count(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		GetROIParametersClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetROIParametersClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetROIParametersClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->get_roiparameters(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SetROIParametersClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetROIParametersClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetROIParametersClass::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_roiparameters(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetRemainingAcquisitionTimeClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetRemainingAcquisitionTimeClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetRemainingAcquisitionTimeClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_remaining_acquisition_time());
}

//+----------------------------------------------------------------------------
//
// method : 		GetSpeedAndResolutionConfigurationClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetSpeedAndResolutionConfigurationClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetSpeedAndResolutionConfigurationClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_speed_and_resolution_configuration());
}



//+----------------------------------------------------------------------------
//
// method : 		GetSpectrumLimitsClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetSpectrumLimitsClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetSpectrumLimitsClass::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_spectrum_limits());
}

//+----------------------------------------------------------------------------
//
// method : 		SetEndingChannelClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetEndingChannelClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetEndingChannelClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_ending_channel(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetStartingChannelClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetStartingChannelClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetStartingChannelClass::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_starting_channel(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StopClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StopClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StopClass::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->stop());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StartClass::execute()
// 
// description :	method to trigger the execution of the command.
//								PLEASE DO NOT MODIFY this method core without pogo	 
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartClass::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartClass::execute(): arrived" << endl;

	Tango::DevFloat	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->start(argin));
	return new CORBA::Any();
}

//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
RontecClass *RontecClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::RontecClass(string &s)
// 
// description :	constructor for the RontecClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
RontecClass::RontecClass(string &s):DeviceClass(s)
{

	cout2 << "Entering RontecClass constructor" << endl;
	write_class_property();
	
	cout2 << "Leaving RontecClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::~RontecClass()
// 
// description :	destructor for the RontecClass
//
//-----------------------------------------------------------------------------
RontecClass::~RontecClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
RontecClass *RontecClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new RontecClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

RontecClass *RontecClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void RontecClass::command_factory()
{
	command_list.push_back(new StartClass("Start",
		Tango::DEV_FLOAT, Tango::DEV_VOID,
		"time in sec.ms",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StopClass("Stop",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetStartingChannelClass("SetStartingChannel",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"first channel of the spectrum to be read",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetEndingChannelClass("SetEndingChannel",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"last channel to be returned",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetSpectrumLimitsClass("GetSpectrumLimits",
		Tango::DEV_VOID, Tango::DEVVAR_LONGARRAY,
		"",
		"the low and high spectrum limits",
		Tango::OPERATOR));
	command_list.push_back(new GetSpeedAndResolutionConfigurationClass("GetSpeedAndResolutionConfiguration",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"processor number actually selected",
		Tango::OPERATOR));
	command_list.push_back(new SetSpeedAndResolutionConfigurationClass("SetSpeedAndResolutionConfiguration",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"the processor selected 0..3",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetRemainingAcquisitionTimeClass("GetRemainingAcquisitionTime",
		Tango::DEV_VOID, Tango::DEV_DOUBLE,
		"",
		"acquisition time remainnig ",
		Tango::OPERATOR));
	command_list.push_back(new SetROIParametersClass("SetROIParameters",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"[0] : TTL output number, [1] low channel, [2] high channel",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetROIParametersClass("GetROIParameters",
		Tango::DEV_LONG, Tango::DEVVAR_LONGARRAY,
		"TTL output number",
		"TTL output # low channel high channel",
		Tango::OPERATOR));
	command_list.push_back(new GetROIDataClass("GetRoiCount",
		Tango::DEV_LONG, Tango::DEV_LONG,
		"TTL output number",
		"counts accumulated from starting",
		Tango::OPERATOR));
	command_list.push_back(new ResetClass("Reset",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"string returend by the rontec",
		Tango::OPERATOR));
	command_list.push_back(new ClearClass("Clear",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new InitSerialLineClass("InitSerialLine",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetDetectorTemperatureClass("GetDetectorTemperature",
		Tango::DEV_VOID, Tango::DEV_FLOAT,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetInputCountRateClass("GetInputCountRate",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"the input count rate",
		Tango::OPERATOR));
	command_list.push_back(new GetOutputCountRateClass("GetOutputCountRate",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"the output count rate",
		Tango::OPERATOR));
	command_list.push_back(new GetDeadTimeClass("GetDeadTime",
		Tango::DEV_VOID, Tango::DEV_FLOAT,
		"",
		"the dead time ( % of non-processed counts )",
		Tango::OPERATOR));
	command_list.push_back(new GetCycleTimeClass("GetCycleTime",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"the cycle time in ms",
		Tango::OPERATOR));
	command_list.push_back(new GetPartOfSpectrumClass("GetPartOfSpectrum",
		Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
		"[0]starting channel, [1] size of channel",
		"the data ",
		Tango::OPERATOR));
	command_list.push_back(new GetEnergyRangeClass("GetEnergyRange",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"the energy range in eV",
		Tango::OPERATOR));
	command_list.push_back(new GetOffsetGainClass("GetOffsetGain",
		Tango::DEV_VOID, Tango::DEVVAR_LONGARRAY,
		"",
		"[0] the offset, [1] the gain",
		Tango::OPERATOR));
	command_list.push_back(new GetPauseStatusClass("GetPauseStatus",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"PAUSE/RUNNING",
		Tango::OPERATOR));
	command_list.push_back(new SetReadSizeClass("SetReadSize",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"size to read in 1 shoot",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetAcquisitionTimeClass("GetAcquisitionTime",
		Tango::DEV_VOID, Tango::DEV_DOUBLE,
		"",
		"time in sec of the current acquisition",
		Tango::OPERATOR));
	command_list.push_back(new SetEnergyRangeClass("SetEnergyRange",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"energy 10000 or 20000 or 40000 or 80000",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SendRontecMessageClass("SendRontecMessage",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"the command and arguments to be sent",
		"the rontec answer as string",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum RontecClass::get_class_property(string &name)
{
	for (int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(name);
}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void RontecClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new Rontec(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: RontecClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void RontecClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : fluoSpectrum
	fluoSpectrumAttrib	*fluo_spectrum = new fluoSpectrumAttrib();
	Tango::UserDefaultAttrProp	fluo_spectrum_prop;
	fluo_spectrum_prop.set_label("fluo spectrum");
	fluo_spectrum_prop.set_description("fluo spectrum returned by the RONTEC MCA\nmax channels number set in NumberOfChannels property\nstarting channel fixed by SetStartingChannel,\nending channel set by SetEndingChannel");
	fluo_spectrum->set_default_properties(fluo_spectrum_prop);
	att_list.push_back(fluo_spectrum);

}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void RontecClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	//	Prepeare DbDatum
	//--------------------------------------------
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("RRontec");
	title << str_title;

	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("handles Rontec MCA channel analyser through a serail RS232 line");
	description << str_desc;
		
		// Use the doc_url field to store all information 
		// on the server version and CVS 
		string::size_type pos, len; 
		
		// 1) Manage module name  
		//  get rid of the $RCSfile:  prefix and of Class.cpp suffix 
		string classname = RCSfile;
		
		pos = classname.find("$RCSfile: ");
		len = classname.length();
		
		if (pos != string::npos) 
			classname= classname.substr(pos+10, len- pos-10); 

		pos = classname.find ("Class.cpp",0);
		if (pos != string::npos) 
			classname=classname.substr(0,pos);
		
		// 2)  Manage version number with SOLEIL CVS rules 
		// tag name is in the form : release_1_0 ==> transform it to 1.0
		// 
		string version ; 
		string str_TagName=string(TagName); 
		
		pos = str_TagName.find_first_of("_",0); 
		if (pos != string::npos) 
			version= str_TagName.substr(pos+1, 3);

		pos = version.find_first_of("_",0); 
		if (pos != string::npos) 
			version[pos] = '.';

		
	//  Store all info in the str_url property		
		
		string	str_url=  "Documentation URL = " + string(HttpServer) + classname +"-" + version + "/index.html" + "\n";
		str_url= str_url + " Version CVS Tag = " + string(TagName)+ "\n"; 
		str_url= str_url + " CVS location = " + string(FileName)+ "\n"; 
		
		Tango::DbDatum	doc_url("doc_url");
		
		doc_url << str_url;

		// Push everything in DataBase

		Tango::DbData	data;
		data.push_back(title);
		data.push_back(description);
		data.push_back(doc_url);
		//	Call database and and values
		//--------------------------------------------
		get_db_class()->put_property(data);
}

}	// namespace
