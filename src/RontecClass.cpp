
static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Instrumentation/Rontec/src/RontecClass.cpp,v 1.2 2006-07-24 14:48:18 tithub Exp $";

static const char *TagName   = "$Name: not supported by cvs2svn $";

static const char *FileName= "$Source: /users/chaize/newsvn/cvsroot/Instrumentation/Rontec/src/RontecClass.cpp,v $"; 

static const char *HttpServer= "http://controle/DeviceServer/doc/";

static const char *RCSfile = "$RCSfile: RontecClass.cpp,v $"; 

//+=============================================================================
//
// file :        RontecClass.cpp
//
// description : C++ source for the RontecClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the Rontec once per process.
//
// project :     TANGO Device Server
//
// $Author: tithub $
//
// $Revision: 1.2 $
//
// $Log: not supported by cvs2svn $
// Revision 1.1.1.1  2005/09/30 12:13:34  syldup
// initial import
//
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft : 		Synchrotron SOLEIL
//								L'Orme des Merisiers
//								Saint-Aubin - BP 48
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include "Rontec.h"
#include "RontecClass.h"


namespace Rontec_ns
{
//+----------------------------------------------------------------------------
//
// method : 		SetSpeedAndResolutionConfigurationCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetSpeedAndResolutionConfigurationCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetSpeedAndResolutionConfigurationCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_speed_and_resolution_configuration(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetROIsCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetROIsCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetROIsCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_rois(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetReadSizeCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetReadSizeCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetReadSizeCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_read_size(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SendRontecMessageCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SendRontecMessageCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SendRontecMessageCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->send_rontec_message(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		ResetCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ResetCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ResetCmd::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->reset());
}


//+----------------------------------------------------------------------------
//
// method : 		GetSpeedAndResolutionConfigurationCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetSpeedAndResolutionConfigurationCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetSpeedAndResolutionConfigurationCmd::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_speed_and_resolution_configuration());
}

//+----------------------------------------------------------------------------
//
// method : 		GetPauseStatusCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPauseStatusCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPauseStatusCmd::execute(): arrived" << endl;

	return insert((static_cast<Rontec *>(device))->get_pause_status());
}

//+----------------------------------------------------------------------------
//
// method : 		GetPartOfSpectrumCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPartOfSpectrumCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPartOfSpectrumCmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	return insert((static_cast<Rontec *>(device))->get_part_of_spectrum(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		ArmCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ArmCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ArmCmd::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->arm());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		StartCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *StartCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "StartCmd::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->start());
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		AbortCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AbortCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AbortCmd::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->abort());
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		ClearDataCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ClearDataCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ClearDataCmd::execute(): arrived" << endl;

	((static_cast<Rontec *>(device))->clear_data());
	return new CORBA::Any();
}









//+----------------------------------------------------------------------------
//
// method : 		SetSingleROICmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetSingleROICmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetSingleROICmd::execute(): arrived" << endl;

	const Tango::DevVarLongArray	*argin;
	extract(in_any, argin);

	((static_cast<Rontec *>(device))->set_single_roi(argin));
	return new CORBA::Any();
}




//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
RontecClass *RontecClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::RontecClass(string &s)
// 
// description : 	constructor for the RontecClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
RontecClass::RontecClass(string &s):DeviceClass(s)
{

	cout2 << "Entering RontecClass constructor" << endl;
	set_default_property();
	write_class_property();
	get_class_property();
	
	cout2 << "Leaving RontecClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::~RontecClass()
// 
// description : 	destructor for the RontecClass
//
//-----------------------------------------------------------------------------
RontecClass::~RontecClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
RontecClass *RontecClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new RontecClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

RontecClass *RontecClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void RontecClass::command_factory()
{
	command_list.push_back(new AbortCmd("Abort",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ArmCmd("Arm",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ClearDataCmd("ClearData",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetPartOfSpectrumCmd("GetPartOfSpectrum",
		Tango::DEVVAR_LONGARRAY, Tango::DEVVAR_LONGARRAY,
		"[0]starting channel, [1] size of channel",
		"the data ",
		Tango::OPERATOR));
	command_list.push_back(new GetPauseStatusCmd("GetPauseStatus",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"PAUSE/RUNNING",
		Tango::OPERATOR));
	command_list.push_back(new GetSpeedAndResolutionConfigurationCmd("GetSpeedAndResolutionConfiguration",
		Tango::DEV_VOID, Tango::DEV_LONG,
		"",
		"processor number actually selected",
		Tango::OPERATOR));
	command_list.push_back(new ResetCmd("Reset",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"string returend by the rontec",
		Tango::OPERATOR));
	command_list.push_back(new SendRontecMessageCmd("SendRontecMessage",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"the command and arguments to be sent",
		"the rontec answer as string",
		Tango::OPERATOR));
	command_list.push_back(new SetReadSizeCmd("SetReadSize",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"size to read in 1 shoot",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetROIsCmd("SetROIs",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"starts and ends of the ROI. eg: tab[0]=126, tab[1]=238, tab[2]=1569,tab[3]=2368",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetSingleROICmd("SetSingleROI",
		Tango::DEVVAR_LONGARRAY, Tango::DEV_VOID,
		"[0] : TTL output number, [1] low channel, [2] high channel",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SetSpeedAndResolutionConfigurationCmd("SetSpeedAndResolutionConfiguration",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"the processor selected 0..3",
		"",
		Tango::OPERATOR));
	command_list.push_back(new StartCmd("Start",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));

	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum RontecClass::get_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum RontecClass::get_default_device_property(string &prop_name)
{
	for (int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum RontecClass::get_default_class_property(string &prop_name)
{
	for (int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void RontecClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new Rontec(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: RontecClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void RontecClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : dataSpectrum
	dataSpectrumAttrib	*data_spectrum = new dataSpectrumAttrib();
	Tango::UserDefaultAttrProp	data_spectrum_prop;
	data_spectrum_prop.set_label("fluo spectrum");
	data_spectrum_prop.set_description("fluo spectrum returned by the RONTEC MCA\nmax channels number set in NumberOfChannels property\nstarting channel fixed by SetStartingChannel,\nending channel set by SetEndingChannel");
	data_spectrum->set_default_properties(data_spectrum_prop);
	att_list.push_back(data_spectrum);

	//	Attribute : nbChannels
	nbChannelsAttrib	*nb_channels = new nbChannelsAttrib();
	Tango::UserDefaultAttrProp	nb_channels_prop;
	nb_channels_prop.set_label("Nb Channels");
	nb_channels_prop.set_max_value("16384");
	nb_channels_prop.set_min_value("0");
	nb_channels_prop.set_description("Number of Channels to get from the DataSource");
	nb_channels->set_default_properties(nb_channels_prop);
	att_list.push_back(nb_channels);

	//	Attribute : integrationTime
	integrationTimeAttrib	*integration_time = new integrationTimeAttrib();
	Tango::UserDefaultAttrProp	integration_time_prop;
	integration_time_prop.set_label("Integration Time");
	integration_time_prop.set_display_unit("s.");
	integration_time_prop.set_description("Time of integration (ie counting time)");
	integration_time->set_default_properties(integration_time_prop);
	att_list.push_back(integration_time);

	//	Attribute : timingType
	timingTypeAttrib	*timing_type = new timingTypeAttrib();
	Tango::UserDefaultAttrProp	timing_type_prop;
	timing_type_prop.set_label("Timing Type");
	timing_type_prop.set_format("%1d");
	timing_type_prop.set_description("Type of timing:<BR>\n0 -> Live (like an OS time)<BR>\n1 -> Real (the real time according to deadTime).");
	timing_type->set_default_properties(timing_type_prop);
	timing_type->set_disp_level(Tango::EXPERT);
	att_list.push_back(timing_type);

	//	Attribute : dataSource
	dataSourceAttrib	*data_source = new dataSourceAttrib();
	Tango::UserDefaultAttrProp	data_source_prop;
	data_source_prop.set_label("DataSource");
	data_source_prop.set_format("%s");
	data_source_prop.set_description("Display the current data source or NONE if not open");
	data_source->set_default_properties(data_source_prop);
	att_list.push_back(data_source);

	//	Attribute : deadTime
	deadTimeAttrib	*dead_time = new deadTimeAttrib();
	Tango::UserDefaultAttrProp	dead_time_prop;
	dead_time_prop.set_label("Dead Time");
	dead_time_prop.set_display_unit("%");
	dead_time_prop.set_format("%9.3f");
	dead_time_prop.set_description("Dead time = [(Real - Live ) / Real] * 100");
	dead_time->set_default_properties(dead_time_prop);
	att_list.push_back(dead_time);

	//	Attribute : countRate
	countRateAttrib	*count_rate = new countRateAttrib();
	Tango::UserDefaultAttrProp	count_rate_prop;
	count_rate_prop.set_description("This is the input count rate. \nRem : output count rate = countRate * (1-deadTime / 100)");
	count_rate->set_default_properties(count_rate_prop);
	att_list.push_back(count_rate);

	//	Attribute : realTime
	realTimeAttrib	*real_time = new realTimeAttrib();
	Tango::UserDefaultAttrProp	real_time_prop;
	real_time_prop.set_label("Real Time");
	real_time_prop.set_display_unit("s");
	real_time_prop.set_format("%4.1f");
	real_time_prop.set_description("Real Time : time taking into account the dead time");
	real_time->set_default_properties(real_time_prop);
	att_list.push_back(real_time);

	//	Attribute : liveTime
	liveTimeAttrib	*live_time = new liveTimeAttrib();
	Tango::UserDefaultAttrProp	live_time_prop;
	live_time_prop.set_label("Live Time");
	live_time_prop.set_display_unit("s");
	live_time_prop.set_format("%4.1f");
	live_time_prop.set_description("Live Time: time which does not take into account the dead time.\nShould be shorter than real time");
	live_time->set_default_properties(live_time_prop);
	att_list.push_back(live_time);

	//	Attribute : roisStartsEnds
	roisStartsEndsAttrib	*rois_starts_ends = new roisStartsEndsAttrib();
	Tango::UserDefaultAttrProp	rois_starts_ends_prop;
	rois_starts_ends_prop.set_label("ROIs");
	rois_starts_ends_prop.set_format("%6d");
	rois_starts_ends_prop.set_description("All the ROIs starts ends: they are in pair\n: start-end.");
	rois_starts_ends->set_default_properties(rois_starts_ends_prop);
	rois_starts_ends->set_disp_level(Tango::EXPERT);
	att_list.push_back(rois_starts_ends);

	//	Attribute : roisStarts
	roisStartsAttrib	*rois_starts = new roisStartsAttrib();
	att_list.push_back(rois_starts);

	//	Attribute : roisEnds
	roisEndsAttrib	*rois_ends = new roisEndsAttrib();
	Tango::UserDefaultAttrProp	rois_ends_prop;
	rois_ends_prop.set_label("ROIs Ends");
	rois_ends_prop.set_format("%6d");
	rois_ends_prop.set_description("End Positions of the ROIs");
	rois_ends->set_default_properties(rois_ends_prop);
	att_list.push_back(rois_ends);

	//	Attribute : cycleTime
	cycleTimeAttrib	*cycle_time = new cycleTimeAttrib();
	att_list.push_back(cycle_time);

	//	Attribute : startingChannel
	startingChannelAttrib	*starting_channel = new startingChannelAttrib();
	att_list.push_back(starting_channel);

	//	Attribute : endingChannel
	endingChannelAttrib	*ending_channel = new endingChannelAttrib();
	att_list.push_back(ending_channel);

	//	Attribute : detectorTemperature
	detectorTemperatureAttrib	*detector_temperature = new detectorTemperatureAttrib();
	att_list.push_back(detector_temperature);

	//	Attribute : energyRange
	energyRangeAttrib	*energy_range = new energyRangeAttrib();
	att_list.push_back(energy_range);

	//	Attribute : offsetGain
	offsetGainAttrib	*offset_gain = new offsetGainAttrib();
	att_list.push_back(offset_gain);

	//	Attribute : readDataSpectrum
	readDataSpectrumAttrib	*read_data_spectrum = new readDataSpectrumAttrib();
	att_list.push_back(read_data_spectrum);

}

//+----------------------------------------------------------------------------
//
// method : 		RontecClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void RontecClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	if (Tango::Util::instance()->_UseDb==false)
		return;

	//	Call database and extract values
	//--------------------------------------------
	get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	RontecClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void RontecClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "Baud";
	prop_desc = "baud rate set on the RONTEC\nDefault is 38400 ( firmware default )\nto set another baud rate :\nset on the RONTEC a new baudrate, write it on the flash,\nthen update the property with the new value\nrestart SerialLine the Rontec DServers\npossible values : 600, 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400,\n19200, 28800, 38400, 57600, 76800, 115200, 230400.";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "SerialLineUrl";
	prop_desc = "Tango name of the serial line device\nthe other serial line properties are fixed for the RONTEC RCL :\nN( no parity),8( data bits),1(stop bit), hardware handshake ( RTS/CTS";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "ConnectedROIMask";
	prop_desc = "list of the TTL outputs connected to a counter\njust for control and throw exception if try to configure a ROI that is not in the list\n8 TTL outputs are available with the current RONTEC MCA hardware\nexample : 1 4 represents : ouptut1, output 4 connected\ndefault : 1";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "NumberOfChannels";
	prop_desc = "number of channels of the MCA.\nThe current RONTEC MCA hardware has 4096 channels.\nthis is for extentions purpose only,\nlet the default value of 4096";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

	prop_name = "MaxFluoEnergy";
	prop_desc = "maximum fluo energy of the last MCA channel.\nwith the current RONTEC MCA Hardware can be 10, 20, 40, or 80 KeV\ndefault : 80.0";
	prop_def  = "";
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		RontecClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void RontecClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("RRontec");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("handles Rontec MCA channel analyser through a serail RS232 line");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
