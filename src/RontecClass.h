//=============================================================================
//
// file :         RontecClass.h
//
// description :  Include for the RontecClass root class.
//                This class is represents the singleton class for
//                the Rontec device class.
//                It contains all properties and methods which the 
//                Rontec requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author: jean_coquet $
//
// $Revision: 1.7 $
//
// $Log: not supported by cvs2svn $
// Revision 1.6  2007/05/15 08:28:14  dhaussy
// * changed energyMode from property to attribute
//
// Revision 1.5  2007/03/30 09:43:13  tithub
// * energy conversion coefficient depend on Rontec speed and resolution configuration
// * offset and gain conversion
//
// Revision 1.4  2007/02/14 08:40:27  tithub
// * added energy mode
//
// Revision 1.3  2006/08/31 15:51:10  tithub
// * Les temps sont exprimés en seconde au lieu de millisecondes
// * La commande GetPartOfSpectrum renvoie une partie du spectre lu si le thread est running, ou lit une partie du spectre sur le Rontec sinon
// * La commande ClearData arrête le thread de lecture
// * Attributs StartingChannel et EndingChannel mémorisés
//
// Revision 1.2  2006/07/24 14:48:18  tithub
// Nouvelle interface Tango
//
// Revision 1.1.1.1  2005/09/30 12:13:34  syldup
// initial import
//
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft :     Synchrotron SOLEIL
//                L'Orme des Merisiers
//                Saint-Aubin - BP 48
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _RONTECCLASS_H
#define _RONTECCLASS_H

#include <tango.h>
#include <Rontec.h>

namespace Rontec_ns
{
//=====================================
//	Define classes for attributes
//=====================================
class energySpectrumAttrib: public Tango::SpectrumAttr
{
public:
	energySpectrumAttrib():SpectrumAttr("energySpectrum", Tango::DEV_DOUBLE, Tango::READ, 8192) {};
	~energySpectrumAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_energySpectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_energySpectrum_allowed(ty);}
};

class roisStartsEndsAttrib: public Tango::SpectrumAttr
{
public:
	roisStartsEndsAttrib():SpectrumAttr("roisStartsEnds", Tango::DEV_DOUBLE, Tango::READ, 80) {};
	~roisStartsEndsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roisStartsEnds(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roisStartsEnds_allowed(ty);}
};

class roisStartsAttrib: public Tango::SpectrumAttr
{
public:
	roisStartsAttrib():SpectrumAttr("roisStarts", Tango::DEV_DOUBLE, Tango::READ, 40) {};
	~roisStartsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roisStarts(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roisStarts_allowed(ty);}
};

class roisEndsAttrib: public Tango::SpectrumAttr
{
public:
	roisEndsAttrib():SpectrumAttr("roisEnds", Tango::DEV_DOUBLE, Tango::READ, 40) {};
	~roisEndsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roisEnds(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roisEnds_allowed(ty);}
};

class offsetGainAttrib: public Tango::SpectrumAttr
{
public:
	offsetGainAttrib():SpectrumAttr("offsetGain", Tango::DEV_DOUBLE, Tango::READ, 2) {};
	~offsetGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_offsetGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_offsetGain_allowed(ty);}
};

class dataSpectrumAttrib: public Tango::SpectrumAttr
{
public:
	dataSpectrumAttrib():SpectrumAttr("dataSpectrum", Tango::DEV_DOUBLE, Tango::READ, 8192) {};
	~dataSpectrumAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_dataSpectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_dataSpectrum_allowed(ty);}
};

class energyModeAttrib: public Tango::Attr
{
public:
	energyModeAttrib():Attr("energyMode", Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~energyModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_energyMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_energyMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_energyMode_allowed(ty);}
};

class timingTypeAttrib: public Tango::Attr
{
public:
	timingTypeAttrib():Attr("timingType", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~timingTypeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_timingType(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_timingType(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_timingType_allowed(ty);}
};

class spectrumStartValueAttrib: public Tango::Attr
{
public:
	spectrumStartValueAttrib():Attr("spectrumStartValue", Tango::DEV_DOUBLE, Tango::WRITE) {};
	~spectrumStartValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_spectrumStartValue(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_spectrumStartValue(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_spectrumStartValue_allowed(ty);}
};

class roi8Attrib: public Tango::Attr
{
public:
	roi8Attrib():Attr("roi8", Tango::DEV_LONG, Tango::READ) {};
	~roi8Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi8(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi8_allowed(ty);}
};

class roi7Attrib: public Tango::Attr
{
public:
	roi7Attrib():Attr("roi7", Tango::DEV_LONG, Tango::READ) {};
	~roi7Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi7(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi7_allowed(ty);}
};

class roi6Attrib: public Tango::Attr
{
public:
	roi6Attrib():Attr("roi6", Tango::DEV_LONG, Tango::READ) {};
	~roi6Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi6(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi6_allowed(ty);}
};

class roi5Attrib: public Tango::Attr
{
public:
	roi5Attrib():Attr("roi5", Tango::DEV_LONG, Tango::READ) {};
	~roi5Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi5(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi5_allowed(ty);}
};

class roi4Attrib: public Tango::Attr
{
public:
	roi4Attrib():Attr("roi4", Tango::DEV_LONG, Tango::READ) {};
	~roi4Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi4(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi4_allowed(ty);}
};

class roi3Attrib: public Tango::Attr
{
public:
	roi3Attrib():Attr("roi3", Tango::DEV_LONG, Tango::READ) {};
	~roi3Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi3(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi3_allowed(ty);}
};

class roi2Attrib: public Tango::Attr
{
public:
	roi2Attrib():Attr("roi2", Tango::DEV_LONG, Tango::READ) {};
	~roi2Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi2(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi2_allowed(ty);}
};

class roi1Attrib: public Tango::Attr
{
public:
	roi1Attrib():Attr("roi1", Tango::DEV_LONG, Tango::READ) {};
	~roi1Attrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_roi1(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_roi1_allowed(ty);}
};

class realTimeAttrib: public Tango::Attr
{
public:
	realTimeAttrib():Attr("realTime", Tango::DEV_DOUBLE, Tango::READ) {};
	~realTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_realTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_realTime_allowed(ty);}
};

class readDataSpectrumAttrib: public Tango::Attr
{
public:
	readDataSpectrumAttrib():Attr("readDataSpectrum", Tango::DEV_BOOLEAN, Tango::WRITE) {};
	~readDataSpectrumAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_readDataSpectrum(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_readDataSpectrum(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_readDataSpectrum_allowed(ty);}
};

class nbChannelsAttrib: public Tango::Attr
{
public:
	nbChannelsAttrib():Attr("nbChannels", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~nbChannelsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_nbChannels(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_nbChannels(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_nbChannels_allowed(ty);}
};

class liveTimeAttrib: public Tango::Attr
{
public:
	liveTimeAttrib():Attr("liveTime", Tango::DEV_DOUBLE, Tango::READ) {};
	~liveTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_liveTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_liveTime_allowed(ty);}
};

class integrationTimeAttrib: public Tango::Attr
{
public:
	integrationTimeAttrib():Attr("integrationTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~integrationTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_integrationTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_integrationTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_integrationTime_allowed(ty);}
};

class energyRangeAttrib: public Tango::Attr
{
public:
	energyRangeAttrib():Attr("energyRange", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~energyRangeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_energyRange(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_energyRange(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_energyRange_allowed(ty);}
};

class spectrumEndValueAttrib: public Tango::Attr
{
public:
	spectrumEndValueAttrib():Attr("spectrumEndValue", Tango::DEV_DOUBLE, Tango::WRITE) {};
	~spectrumEndValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_spectrumEndValue(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_spectrumEndValue(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_spectrumEndValue_allowed(ty);}
};

class detectorTemperatureAttrib: public Tango::Attr
{
public:
	detectorTemperatureAttrib():Attr("detectorTemperature", Tango::DEV_DOUBLE, Tango::READ) {};
	~detectorTemperatureAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_detectorTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_detectorTemperature_allowed(ty);}
};

class deadTimeAttrib: public Tango::Attr
{
public:
	deadTimeAttrib():Attr("deadTime", Tango::DEV_DOUBLE, Tango::READ) {};
	~deadTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_deadTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_deadTime_allowed(ty);}
};

class dataSourceAttrib: public Tango::Attr
{
public:
	dataSourceAttrib():Attr("dataSource", Tango::DEV_STRING, Tango::READ) {};
	~dataSourceAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_dataSource(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_dataSource_allowed(ty);}
};

class cycleTimeAttrib: public Tango::Attr
{
public:
	cycleTimeAttrib():Attr("cycleTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~cycleTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_cycleTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Rontec *>(dev))->write_cycleTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_cycleTime_allowed(ty);}
};

class countRateAttrib: public Tango::Attr
{
public:
	countRateAttrib():Attr("countRate", Tango::DEV_DOUBLE, Tango::READ) {};
	~countRateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Rontec *>(dev))->read_countRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Rontec *>(dev))->is_countRate_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class StartCmd : public Tango::Command
{
public:
	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_Start_allowed(any);}
};



class SetSpeedAndResolutionConfigurationCmd : public Tango::Command
{
public:
	SetSpeedAndResolutionConfigurationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSpeedAndResolutionConfigurationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSpeedAndResolutionConfigurationCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_SetSpeedAndResolutionConfiguration_allowed(any);}
};



class SetSingleROICmd : public Tango::Command
{
public:
	SetSingleROICmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetSingleROICmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetSingleROICmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_SetSingleROI_allowed(any);}
};



class SetROIsCmd : public Tango::Command
{
public:
	SetROIsCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SetROIsCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SetROIsCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_SetROIs_allowed(any);}
};



class SendRontecMessageCmd : public Tango::Command
{
public:
	SendRontecMessageCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendRontecMessageCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendRontecMessageCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_SendRontecMessage_allowed(any);}
};



class ResetCmd : public Tango::Command
{
public:
	ResetCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_Reset_allowed(any);}
};



class GetSpeedAndResolutionConfigurationCmd : public Tango::Command
{
public:
	GetSpeedAndResolutionConfigurationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetSpeedAndResolutionConfigurationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetSpeedAndResolutionConfigurationCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_GetSpeedAndResolutionConfiguration_allowed(any);}
};



class GetPauseStatusCmd : public Tango::Command
{
public:
	GetPauseStatusCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetPauseStatusCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetPauseStatusCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_GetPauseStatus_allowed(any);}
};



class GetPartOfSpectrumCmd : public Tango::Command
{
public:
	GetPartOfSpectrumCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GetPartOfSpectrumCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GetPartOfSpectrumCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_GetPartOfSpectrum_allowed(any);}
};



class ClearDataCmd : public Tango::Command
{
public:
	ClearDataCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ClearDataCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ClearDataCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_ClearData_allowed(any);}
};



class ArmCmd : public Tango::Command
{
public:
	ArmCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ArmCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ArmCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_Arm_allowed(any);}
};



class AbortCmd : public Tango::Command
{
public:
	AbortCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Rontec *>(dev))->is_Abort_allowed(any);}
};



//
// The RontecClass singleton definition
//

class RontecClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static RontecClass *init(const char *);
	static RontecClass *instance();
	~RontecClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	RontecClass(string &);
	static RontecClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Rontec_ns

#endif // _RONTECCLASS_H
