//=============================================================================
//
// file :        Rontec.h
//
// description : Include for the Rontec class.
//
// project :	RRontec
//
// $Author: dhaussy $
//
// $Revision: 1.7 $
//
// $Log: not supported by cvs2svn $
// Revision 1.6  2007/04/23 14:56:03  buteau
// Ajout Makefile.linux
//
// Revision 1.5  2007/03/30 09:43:13  tithub
// * energy conversion coefficient depend on Rontec speed and resolution configuration
// * offset and gain conversion
//
// Revision 1.4  2007/02/14 08:40:27  tithub
// * added energy mode
//
// Revision 1.3  2006/08/31 15:51:10  tithub
// * Les temps sont exprimés en seconde au lieu de millisecondes
// * La commande GetPartOfSpectrum renvoie une partie du spectre lu si le thread est running, ou lit une partie du spectre sur le Rontec sinon
// * La commande ClearData arrête le thread de lecture
// * Attributs StartingChannel et EndingChannel mémorisés
//
// Revision 1.2  2006/07/24 14:48:18  tithub
// Nouvelle interface Tango
//
// Revision 1.1.1.1  2005/09/30 12:13:33  syldup
// initial import
//
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _RONTEC_H
#define _RONTEC_H

#include <tango.h>
#include <DeviceProxyHelper.h>
#include "RontecImpl.h"

#define NB_MAX_ROI 8
//using namespace Tango;

/**
 * @author	$Author: dhaussy $
 * @version $Revision: 1.7 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------
namespace Rontec_ns
{
/**
 * Class Description:
 * handles Rontec MCA channel analyser through a serail RS232 line
 */

/*
 *	Device States Description:
*  Tango::FAULT :    command error
*  Tango::INIT :     *
*  Tango::RUNNING :  acquisition in progress
*  Tango::STANDBY :  RONTEC OK, ready to accept command
*  Tango::UNKNOWN :  communication loosed with RONTEC
 */


class Rontec: public Tango::Device_3Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------

	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_countRate_read;
		Tango::DevDouble	*attr_cycleTime_read;
		Tango::DevDouble	attr_cycleTime_write;
		Tango::DevString	*attr_dataSource_read;
		Tango::DevDouble	*attr_dataSpectrum_read;
		Tango::DevDouble	*attr_deadTime_read;
		Tango::DevDouble	*attr_detectorTemperature_read;
		Tango::DevDouble	attr_spectrumEndValue_write;
		Tango::DevLong	*attr_energyRange_read;
		Tango::DevLong	attr_energyRange_write;
		Tango::DevDouble	*attr_integrationTime_read;
		Tango::DevDouble	attr_integrationTime_write;
		Tango::DevDouble	*attr_liveTime_read;
		Tango::DevShort	*attr_nbChannels_read;
		Tango::DevShort	attr_nbChannels_write;
		Tango::DevDouble	*attr_offsetGain_read;
		Tango::DevBoolean	attr_readDataSpectrum_write;
		Tango::DevDouble	*attr_realTime_read;
		Tango::DevLong	*attr_roi1_read;
		Tango::DevLong	*attr_roi2_read;
		Tango::DevLong	*attr_roi3_read;
		Tango::DevLong	*attr_roi4_read;
		Tango::DevLong	*attr_roi5_read;
		Tango::DevLong	*attr_roi6_read;
		Tango::DevLong	*attr_roi7_read;
		Tango::DevLong	*attr_roi8_read;
		Tango::DevDouble	*attr_roisEnds_read;
		Tango::DevDouble	*attr_roisStarts_read;
		Tango::DevDouble	*attr_roisStartsEnds_read;
		Tango::DevDouble	attr_spectrumStartValue_write;
		Tango::DevShort	*attr_timingType_read;
		Tango::DevShort	attr_timingType_write;
		Tango::DevDouble	*attr_energySpectrum_read;
		Tango::DevBoolean	attr_energyMode_write;
//@}
		
/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	list of the TTL outputs connected to a counter
 *	just for control and throw exception if try to configure a ROI that is not in the list
 *	8 TTL outputs are available with the current RONTEC MCA hardware
 *	example : 1 4 represents : ouptut1, output 4 connected
 *	default : 1
 */
	string	connectedROIMask;
/**
 *	maximum fluo energy of the last MCA channel.
 *	with the current RONTEC MCA Hardware can be 10, 20, 40, or 80 KeV
 *	default : 80.0
 */
	Tango::DevDouble	maxFluoEnergy;
/**
 *	number of channels of the MCA.
 *	The current RONTEC MCA hardware has 4096 channels.
 *	this is for extentions purpose only,
 *	let the default value of 4096
 */
	Tango::DevLong	numberOfChannels;
/**
 *	Tango name of the serial line device
 *	the other serial line properties are fixed for the RONTEC RCL :
 *	N( no parity),8( data bits),1(stop bit), hardware handshake ( RTS/CTS
 */
	string	serialLineUrl;
/**
 *	Spectrum read packet size used in reading thread
 */
	Tango::DevLong	spectrumPacketSize;
/**
 *	Energy conversion polynomial coefficient order 0
 */
	vector<double>	energyCoeff0;
/**
 *	Energy conversion polynomial coefficient order 0
 */
	vector<double>	energyCoeff1;
/**
 *	Energy conversion polynomial coefficient order 2
 */
	vector<double>	energyCoeff2;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Rontec(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	Rontec(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	Rontec(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~Rontec() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Rontec methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for countRate acquisition result.
 */
	virtual void read_countRate(Tango::Attribute &attr);
/**
 *	Extract real attribute values for cycleTime acquisition result.
 */
	virtual void read_cycleTime(Tango::Attribute &attr);
/**
 *	Write cycleTime attribute values to hardware.
 */
	virtual void write_cycleTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for dataSource acquisition result.
 */
	virtual void read_dataSource(Tango::Attribute &attr);
/**
 *	Extract real attribute values for dataSpectrum acquisition result.
 */
	virtual void read_dataSpectrum(Tango::Attribute &attr);
/**
 *	Extract real attribute values for deadTime acquisition result.
 */
	virtual void read_deadTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for detectorTemperature acquisition result.
 */
	virtual void read_detectorTemperature(Tango::Attribute &attr);
/**
 *	Extract real attribute values for spectrumEndValue acquisition result.
 */
	virtual void read_spectrumEndValue(Tango::Attribute &attr);
/**
 *	Write spectrumEndValue attribute values to hardware.
 */
	virtual void write_spectrumEndValue(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for energyRange acquisition result.
 */
	virtual void read_energyRange(Tango::Attribute &attr);
/**
 *	Write energyRange attribute values to hardware.
 */
	virtual void write_energyRange(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for integrationTime acquisition result.
 */
	virtual void read_integrationTime(Tango::Attribute &attr);
/**
 *	Write integrationTime attribute values to hardware.
 */
	virtual void write_integrationTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for liveTime acquisition result.
 */
	virtual void read_liveTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for nbChannels acquisition result.
 */
	virtual void read_nbChannels(Tango::Attribute &attr);
/**
 *	Write nbChannels attribute values to hardware.
 */
	virtual void write_nbChannels(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for offsetGain acquisition result.
 */
	virtual void read_offsetGain(Tango::Attribute &attr);
/**
 *	Extract real attribute values for readDataSpectrum acquisition result.
 */
	virtual void read_readDataSpectrum(Tango::Attribute &attr);
/**
 *	Write readDataSpectrum attribute values to hardware.
 */
	virtual void write_readDataSpectrum(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for realTime acquisition result.
 */
	virtual void read_realTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi1 acquisition result.
 */
	virtual void read_roi1(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi2 acquisition result.
 */
	virtual void read_roi2(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi3 acquisition result.
 */
	virtual void read_roi3(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi4 acquisition result.
 */
	virtual void read_roi4(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi5 acquisition result.
 */
	virtual void read_roi5(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi6 acquisition result.
 */
	virtual void read_roi6(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi7 acquisition result.
 */
	virtual void read_roi7(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roi8 acquisition result.
 */
	virtual void read_roi8(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roisEnds acquisition result.
 */
	virtual void read_roisEnds(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roisStarts acquisition result.
 */
	virtual void read_roisStarts(Tango::Attribute &attr);
/**
 *	Extract real attribute values for roisStartsEnds acquisition result.
 */
	virtual void read_roisStartsEnds(Tango::Attribute &attr);
/**
 *	Extract real attribute values for spectrumStartValue acquisition result.
 */
	virtual void read_spectrumStartValue(Tango::Attribute &attr);
/**
 *	Write spectrumStartValue attribute values to hardware.
 */
	virtual void write_spectrumStartValue(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for timingType acquisition result.
 */
	virtual void read_timingType(Tango::Attribute &attr);
/**
 *	Write timingType attribute values to hardware.
 */
	virtual void write_timingType(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for energySpectrum acquisition result.
 */
	virtual void read_energySpectrum(Tango::Attribute &attr);
/**
 *	Extract real attribute values for energyMode acquisition result.
 */
	virtual void read_energyMode(Tango::Attribute &attr);
/**
 *	Write energyMode attribute values to hardware.
 */
	virtual void write_energyMode(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for countRate attribute.
 */
	virtual bool is_countRate_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for cycleTime attribute.
 */
	virtual bool is_cycleTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for dataSource attribute.
 */
	virtual bool is_dataSource_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for dataSpectrum attribute.
 */
	virtual bool is_dataSpectrum_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for deadTime attribute.
 */
	virtual bool is_deadTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorTemperature attribute.
 */
	virtual bool is_detectorTemperature_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for spectrumEndValue attribute.
 */
	virtual bool is_spectrumEndValue_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for energyRange attribute.
 */
	virtual bool is_energyRange_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for integrationTime attribute.
 */
	virtual bool is_integrationTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for liveTime attribute.
 */
	virtual bool is_liveTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for nbChannels attribute.
 */
	virtual bool is_nbChannels_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for offsetGain attribute.
 */
	virtual bool is_offsetGain_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for readDataSpectrum attribute.
 */
	virtual bool is_readDataSpectrum_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for realTime attribute.
 */
	virtual bool is_realTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi1 attribute.
 */
	virtual bool is_roi1_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi2 attribute.
 */
	virtual bool is_roi2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi3 attribute.
 */
	virtual bool is_roi3_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi4 attribute.
 */
	virtual bool is_roi4_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi5 attribute.
 */
	virtual bool is_roi5_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi6 attribute.
 */
	virtual bool is_roi6_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi7 attribute.
 */
	virtual bool is_roi7_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roi8 attribute.
 */
	virtual bool is_roi8_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roisEnds attribute.
 */
	virtual bool is_roisEnds_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roisStarts attribute.
 */
	virtual bool is_roisStarts_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for roisStartsEnds attribute.
 */
	virtual bool is_roisStartsEnds_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for spectrumStartValue attribute.
 */
	virtual bool is_spectrumStartValue_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for timingType attribute.
 */
	virtual bool is_timingType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for energySpectrum attribute.
 */
	virtual bool is_energySpectrum_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for energyMode attribute.
 */
	virtual bool is_energyMode_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Abort command.
 */
	virtual bool is_Abort_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Arm command.
 */
	virtual bool is_Arm_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ClearData command.
 */
	virtual bool is_ClearData_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetPartOfSpectrum command.
 */
	virtual bool is_GetPartOfSpectrum_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetPauseStatus command.
 */
	virtual bool is_GetPauseStatus_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSpeedAndResolutionConfiguration command.
 */
	virtual bool is_GetSpeedAndResolutionConfiguration_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SendRontecMessage command.
 */
	virtual bool is_SendRontecMessage_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetROIs command.
 */
	virtual bool is_SetROIs_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetSingleROI command.
 */
	virtual bool is_SetSingleROI_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetSpeedAndResolutionConfiguration command.
 */
	virtual bool is_SetSpeedAndResolutionConfiguration_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 * stops acquisition already running
 *	@exception DevFailed
 */
	void	abort();
/**
 * will Arm the MCA (ie prepare the MCA).
 *	@exception DevFailed
 */
	void	arm();
/**
 * clears the acquisition memory
 *	@exception DevFailed
 */
	void	clear_data();
/**
 * returns the data starting at argin[0] (exception if argin[0] < starting channel cofigured
 *	for argin[1] channel truncated if exceeds the end_channel configured
 *	@param	argin	[0]starting channel, [1] size of channel
 *	@return	the data 
 *	@exception DevFailed
 */
	Tango::DevVarLongArray	*get_part_of_spectrum(const Tango::DevVarDoubleArray *);
/**
 * returns PAUSE or RUNNING according to acquisition stopped or running
 *	@return	PAUSE/RUNNING
 *	@exception DevFailed
 */
	Tango::DevString	get_pause_status();
/**
 * returns the processor configured :
 *	0 : max cps 1 : ... cps 2 : ..... cps 3 : min cps
 *	@return	processor number actually selected
 *	@exception DevFailed
 */
	Tango::DevLong	get_speed_and_resolution_configuration();
/**
 * 
 *	@return	string returend by the rontec
 *	@exception DevFailed
 */
	Tango::DevString	reset();
/**
 * 
 *	@param	argin	the command and arguments to be sent
 *	@return	the rontec answer as string
 *	@exception DevFailed
 */
	Tango::DevString	send_rontec_message(Tango::DevString);
/**
 * Set the ROIs. the parameter is an array with values going by pair: tab[0]=126, tab[1]=238 -> first ROI starts from 126, ends to 238 tab[2]=1569,tab[3]=2368 -> second ROI starts from 1569, ends to 2368.
 *	@param	argin	starts and ends of the ROI. eg: tab[0]=126, tab[1]=238, tab[2]=1569,tab[3]=2368
 *	@exception DevFailed
 */
	void	set_rois(const Tango::DevVarDoubleArray *);
/**
 * configures the TTL output number for pulse output photons processed with
 *	low_channel < energy < high_channel
 *	the RONTEC waits for energy so we retreive energy in DServer from channel and MaxFluoEnergy
 *	channels are retreived according amplifier and energy calibration.
 *	not alowed if acquisition is running
 *	Exception if ROI number not in the ConnectedROIMask property
 *	@param	argin	[0] : TTL output number, [1] low energy (eV), [2] high energy (eV)
 *	@exception DevFailed
 */
	void	set_single_roi(const Tango::DevVarDoubleArray *);
/**
 * selects the processor
 *	0 : max cps ...... 3 : min cps
 *	depends on real hardware
 *	exception if error
 *	@param	argin	the processor selected 0..3
 *	@exception DevFailed
 */
	void	set_speed_and_resolution_configuration(Tango::DevLong);
/**
 * starts a acquisition previously configured with attributes startingChannel, endingChannel, integrationTime
 *	for time given in integrationTime
 *	clears memory in the MCA if not done.
 *	for continuous acquisition : integrationTime=0
 *	@exception DevFailed
 */
	void	start();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	

	// DYNAMIC ATTRIBUTES
	//--------------------
protected :	
	//	Add your own data members here
	//-----------------------------------------
	// writes back the write part of attribute
	bool is_ROI_configured(long ttl_number);
	
	// Rontec MCA implementation class
	RontecImpl* _mca;

	double _integration_time;	// integration time used with start() command
	bool _live_time;			// false = integration time in real time, true = integration time in live time
	bool _start_reading_thread;
	double _coeff0;
	double _coeff1;
	double _coeff2;

	double get_energy_from_channel(long channel);
	long get_channel_from_energy(double energy);
};

} // namespace

#endif	// _RONTEC_H
