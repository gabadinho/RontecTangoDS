static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Instrumentation/Rontec/src/Rontec.cpp,v 1.7 2007-03-30 09:43:13 tithub Exp $";
//+=============================================================================
//
// file :         Rontec.cpp
//
// description :  C++ source for the Rontec and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Rontec are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: tithub $
//
// $Revision: 1.7 $
//
// $Log: not supported by cvs2svn $
// Revision 1.6  2007/03/01 09:05:18  tithub
// * roiStarts and roiEnds attributes in energy
//
// Revision 1.5  2007/02/14 08:40:27  tithub
// * added energy mode
//
// Revision 1.4  2006/08/31 15:51:10  tithub
// * Les temps sont exprimés en seconde au lieu de millisecondes
// * La commande GetPartOfSpectrum renvoie une partie du spectre lu si le thread est running, ou lit une partie du spectre sur le Rontec sinon
// * La commande ClearData arrête le thread de lecture
// * Attributs StartingChannel et EndingChannel mémorisés
//
// Revision 1.3  2006/07/25 07:56:05  tithub
// no message
//
// Revision 1.2  2006/07/24 14:48:18  tithub
// Nouvelle interface Tango
//
// Revision 1.1.1.1  2005/09/30 12:13:33  syldup
// initial import
//
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft : 		Synchrotron SOLEIL
//								L'Orme des Merisiers
//								Saint-Aubin - BP 48
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondance
//	between commands and method's name.
//
//  Command's name                      |  Method's name
//	----------------------------------------
//  State                               |  dev_state()
//  Status                              |  dev_status()
//  Abort                               |  abort()
//  Arm                                 |  arm()
//  ClearData                           |  clear_data()
//  GetPartOfSpectrum                   |  get_part_of_spectrum()
//  GetPauseStatus                      |  get_pause_status()
//  GetSpeedAndResolutionConfiguration  |  get_speed_and_resolution_configuration()
//  Reset                               |  reset()
//  SendRontecMessage                   |  send_rontec_message()
//  SetROIs                             |  set_rois()
//  SetSingleROI                        |  set_single_roi()
//  SetSpeedAndResolutionConfiguration  |  set_speed_and_resolution_configuration()
//  Start                               |  start()
//
//===================================================================


#include <tango.h>
#include <Rontec.h>
#include <RontecClass.h>
#include <PogoHelper.h>
//#include <XString.h>
#include <math.h>

namespace Rontec_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Rontec::Rontec(string &s)
// 
// description : 	constructor for simulated Rontec
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
Rontec::Rontec(Tango::DeviceClass *cl,string &s)
:Tango::Device_3Impl(cl,s.c_str())
{
	try {
		init_device();
	} catch(...) {
		set_state(Tango::INIT);
		set_status("The device was not successfully initialized !");
	}
}

Rontec::Rontec(Tango::DeviceClass *cl,const char *s)
:Tango::Device_3Impl(cl,s)
{
	try {
		init_device();
	} catch(...) {
		set_state(Tango::INIT);
		set_status("The device was not successfully initialized !");
	}
}

Rontec::Rontec(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_3Impl(cl,s,d)
{
	try {
		init_device();
	} catch(...) {
		set_state(Tango::INIT);
		set_status("The device was not successfully initialized !");
	}
}
//+----------------------------------------------------------------------------
//
// method : 		Rontec::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Rontec::delete_device()
{
	//	Delete device's allocated object
	DELETE_DEVSTRING_ATTRIBUTE(attr_dataSource_read);

	DELETE_SCALAR_ATTRIBUTE(attr_nbChannels_read);
	DELETE_SCALAR_ATTRIBUTE(attr_integrationTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_deadTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_countRate_read);
	DELETE_SCALAR_ATTRIBUTE(attr_realTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_liveTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_cycleTime_read);
	DELETE_SCALAR_ATTRIBUTE(attr_detectorTemperature_read);
	DELETE_SCALAR_ATTRIBUTE(attr_energyRange_read);
	DELETE_SCALAR_ATTRIBUTE(attr_timingType_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi1_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi2_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi3_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi4_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi5_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi6_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi7_read);
	DELETE_SCALAR_ATTRIBUTE(attr_roi8_read);

	DELETE_SPECTRUM_ATTRIBUTE(attr_roisStartsEnds_read);
	DELETE_SPECTRUM_ATTRIBUTE(attr_roisStarts_read);
	DELETE_SPECTRUM_ATTRIBUTE(attr_roisEnds_read);
	DELETE_SPECTRUM_ATTRIBUTE(attr_offsetGain_read);
	DELETE_SPECTRUM_ATTRIBUTE(attr_dataSpectrum_read);
	DELETE_SPECTRUM_ATTRIBUTE(attr_energySpectrum_read);


	// Rontec MCA implementation class
	if(_mca) {
		delete _mca;
		_mca = 0;
	}
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Rontec::init_device()
{
	INFO_STREAM << "Rontec::Rontec() create device " << device_name << endl;

	attr_roisStartsEnds_read = 0;
	attr_roisStarts_read = 0;
	attr_roisEnds_read = 0;
	attr_offsetGain_read = 0;
	attr_dataSpectrum_read = 0;
	attr_energySpectrum_read = 0;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

	//create_dynamic_attributes();

	string dataSource = "Rontec";
	CREATE_DEVSTRING_ATTRIBUTE(attr_dataSource_read,dataSource.size()+1,dataSource.c_str());

	CREATE_SCALAR_ATTRIBUTE(attr_nbChannels_read);
	CREATE_SCALAR_ATTRIBUTE(attr_integrationTime_read);
	CREATE_SCALAR_ATTRIBUTE(attr_deadTime_read);
	CREATE_SCALAR_ATTRIBUTE(attr_countRate_read);
	CREATE_SCALAR_ATTRIBUTE(attr_realTime_read);
	CREATE_SCALAR_ATTRIBUTE(attr_liveTime_read);
	CREATE_SCALAR_ATTRIBUTE(attr_cycleTime_read);
	CREATE_SCALAR_ATTRIBUTE(attr_detectorTemperature_read);
	CREATE_SCALAR_ATTRIBUTE(attr_energyRange_read);
	CREATE_SCALAR_ATTRIBUTE(attr_timingType_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi1_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi2_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi3_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi4_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi5_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi6_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi7_read);
	CREATE_SCALAR_ATTRIBUTE(attr_roi8_read);

	CREATE_SPECTRUM_ATTRIBUTE(attr_roisStartsEnds_read,2*NB_MAX_ROI);
	CREATE_SPECTRUM_ATTRIBUTE(attr_roisStarts_read,NB_MAX_ROI);
	CREATE_SPECTRUM_ATTRIBUTE(attr_roisEnds_read,NB_MAX_ROI);
	CREATE_SPECTRUM_ATTRIBUTE(attr_offsetGain_read,2);
	CREATE_SPECTRUM_ATTRIBUTE(attr_dataSpectrum_read, numberOfChannels);
	CREATE_SPECTRUM_ATTRIBUTE(attr_energySpectrum_read, numberOfChannels);

	_integration_time = 0;
	_live_time = false;
	_start_reading_thread = true;

	// rontec implementation class
	_mca = new RontecImpl(this);
	_mca->init(serialLineUrl,/*baud,timeout,*/spectrumPacketSize);

	// update energy coefficients
	_coeff0 = 0.0;
	_coeff1 = 0.0;
	_coeff2 = 0.0;
	get_speed_and_resolution_configuration();

	set_state(Tango::UNKNOWN);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::readDeviceProperies()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Rontec::get_device_property()
{
	//	Initialize your default values here.
	//------------------------------------------

	serialLineUrl = "rontec/test/serial";
	connectedROIMask = "";
	numberOfChannels = 4096;
	maxFluoEnergy = 80.0;
	spectrumPacketSize = 256;
	energyMode = false;

	//	Read device properties from database.(Automatic code generation)
	//-------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ConnectedROIMask"));
	dev_prop.push_back(Tango::DbDatum("MaxFluoEnergy"));
	dev_prop.push_back(Tango::DbDatum("NumberOfChannels"));
	dev_prop.push_back(Tango::DbDatum("SerialLineUrl"));
	dev_prop.push_back(Tango::DbDatum("SpectrumPacketSize"));
	dev_prop.push_back(Tango::DbDatum("EnergyMode"));
	dev_prop.push_back(Tango::DbDatum("EnergyCoeff0"));
	dev_prop.push_back(Tango::DbDatum("EnergyCoeff1"));
	dev_prop.push_back(Tango::DbDatum("EnergyCoeff2"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	RontecClass	*ds_class =
		(static_cast<RontecClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize ConnectedROIMask from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  connectedROIMask;
	//	Try to initialize ConnectedROIMask from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  connectedROIMask;
	//	And try to extract ConnectedROIMask value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  connectedROIMask;

	//	Try to initialize MaxFluoEnergy from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  maxFluoEnergy;
	//	Try to initialize MaxFluoEnergy from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  maxFluoEnergy;
	//	And try to extract MaxFluoEnergy value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  maxFluoEnergy;

	//	Try to initialize NumberOfChannels from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  numberOfChannels;
	//	Try to initialize NumberOfChannels from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  numberOfChannels;
	//	And try to extract NumberOfChannels value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  numberOfChannels;

	//	Try to initialize SerialLineUrl from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  serialLineUrl;
	//	Try to initialize SerialLineUrl from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  serialLineUrl;
	//	And try to extract SerialLineUrl value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  serialLineUrl;

	//	Try to initialize SpectrumPacketSize from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  spectrumPacketSize;
	//	Try to initialize SpectrumPacketSize from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  spectrumPacketSize;
	//	And try to extract SpectrumPacketSize value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  spectrumPacketSize;

	//	Try to initialize EnergyMode from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  energyMode;
	//	Try to initialize EnergyMode from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  energyMode;
	//	And try to extract EnergyMode value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  energyMode;

	//	Try to initialize EnergyCoeff0 from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  energyCoeff0;
	//	Try to initialize EnergyCoeff0 from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  energyCoeff0;
	//	And try to extract EnergyCoeff0 value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  energyCoeff0;

	//	Try to initialize EnergyCoeff1 from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  energyCoeff1;
	//	Try to initialize EnergyCoeff1 from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  energyCoeff1;
	//	And try to extract EnergyCoeff1 value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  energyCoeff1;

	//	Try to initialize EnergyCoeff2 from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  energyCoeff2;
	//	Try to initialize EnergyCoeff2 from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  energyCoeff2;
	//	And try to extract EnergyCoeff2 value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  energyCoeff2;



	//	End of Automatic code generation
	//-------------------------------------------------------------
	// create properties ( init to default values ) if necessary
	/*
	Tango::DbData data_put;
	if (dev_prop[0].is_empty()==true)
	{
		Tango::DbDatum	property("Baud");
		property	<<	baud;
		data_put.push_back(property);
	}
	if (dev_prop[1].is_empty()==true)
	{
		Tango::DbDatum	property("SerialLineUrl");
		property	<<	serialLineUrl;
		data_put.push_back(property);
	}
	if (dev_prop[2].is_empty()==true)
	{
		Tango::DbDatum	property("ConnectedROIMask");
		property	<<	connectedROIMask;
		data_put.push_back(property);
	}
	if (dev_prop[3].is_empty()==true)
	{
		Tango::DbDatum	property("NumberOfChannels");
		property	<<	numberOfChannels;
		data_put.push_back(property);
	}
	if (dev_prop[4].is_empty()==true)
	{
		Tango::DbDatum	property("MaxFluoEnergy");
		property	<<	maxFluoEnergy;
		data_put.push_back(property);
	}
	get_db_device()->put_property(data_put);
	*/
}
//+----------------------------------------------------------------------------
//
// method : 		Rontec::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Rontec::always_executed_hook()
{
	if(get_state()!=Tango::INIT) {
		try {
			if(!_mca) {
				set_state(Tango::INIT);
				set_status("_mca not initialized !");
			}
			else {
				std::string rontec_status = _mca->get_pause_status();
				std::string reader_status;
				if(_mca->is_reading_thread_running()) {
					reader_status = "RUNNING";
				}
				else {
					reader_status = "PAUSE";
				}
				if(rontec_status=="RUNNING" || reader_status=="RUNNING") {
					set_state(Tango::RUNNING);
				}
				else {
					set_state(Tango::OFF);
				}
				set_status("Rontec: " + rontec_status + ", Reading thread: " + reader_status);
			}
		} catch(...) {
			set_state(Tango::INIT);
			set_status("Unknown error while trying to get Rontec status.");
		}
	}
}
//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Rontec::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "Rontec::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_spectrumEndValue
// 
// description : 	Extract real attribute values for spectrumEndValue acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_spectrumEndValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_spectrumEndValue(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_spectrumEndValue
// 
// description : 	Write spectrumEndValue attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_spectrumEndValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_spectrumEndValue(Tango::WAttribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	attr.get_write_value(attr_spectrumEndValue_write);
	long channel = get_channel_from_energy(attr_spectrumEndValue_write);
	_mca->set_spectrum_reading_last_channel(channel);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_spectrumStartValue
// 
// description : 	Extract real attribute values for spectrumStartValue acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_spectrumStartValue(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_spectrumStartValue(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_spectrumStartValue
// 
// description : 	Write spectrumStartValue attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_spectrumStartValue(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_spectrumStartValue(Tango::WAttribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	attr.get_write_value(attr_spectrumStartValue_write);
	long channel = get_channel_from_energy(attr_spectrumStartValue_write);
	_mca->set_spectrum_reading_first_channel(channel);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_energySpectrum
// 
// description : 	Extract real attribute values for energySpectrum acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_energySpectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_energySpectrum(Tango::Attribute &attr) entering... "<< endl;
	long first = _mca->get_read_spectrum_first_channel();
	long length = _mca->get_read_spectrum_length();
	double* energy = new double[length];
	for(long i=0; i<length; ++i) {
		attr_energySpectrum_read[i] = (Tango::DevDouble) get_energy_from_channel(first+i);
	}
	attr.set_value(attr_energySpectrum_read,length);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_readDataSpectrum
// 
// description : 	Extract real attribute values for readDataSpectrum acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_readDataSpectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_readDataSpectrum(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_readDataSpectrum
// 
// description : 	Write readDataSpectrum attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_readDataSpectrum(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_readDataSpectrum(Tango::WAttribute &attr) entering... "<< endl;
	attr.get_write_value(attr_readDataSpectrum_write);
	_start_reading_thread = attr_readDataSpectrum_write;
}


//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_dataSpectrum
// 
// description : 	Extract real attribute values for dataSpectrum acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_dataSpectrum(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_dataSpectrum(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	long length = _mca->get_read_spectrum_length();
	long first = _mca->get_read_spectrum_first_channel();
	unsigned long* data = new unsigned long[length];
	_mca->get_spectrum(data,first,length);
	for(int i = 0; i < length; i++) {
		attr_dataSpectrum_read[i] = (Tango::DevDouble)(data[i]);
	}
	delete [] data;
	attr.set_value(attr_dataSpectrum_read, length);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_nbChannels
// 
// description : 	Extract real attribute values for nbChannels acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_nbChannels(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_nbChannels(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	long start_ch = 0;
	long step_w = 0;
	long summation_num = 0;
	long end_chan = 0;
	_mca->get_spectrum_reading_properties(start_ch,step_w,summation_num,end_chan);
	*attr_nbChannels_read = end_chan - start_ch + 1;
	attr.set_value(attr_nbChannels_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_nbChannels
// 
// description : 	Write nbChannels attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_nbChannels(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_nbChannels(Tango::WAttribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	attr.get_write_value(attr_nbChannels_write);
	long start_ch = 0;
	long step_w = 0;
	long summation_num = 0;
	long end_chan = 0;
	_mca->get_spectrum_reading_properties(start_ch,step_w,summation_num,end_chan);
	end_chan = start_ch + attr_nbChannels_write - 1;
	_mca->set_spectrum_reading_last_channel(end_chan);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_integrationTime
// 
// description : 	Extract real attribute values for integrationTime acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_integrationTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_integrationTime(Tango::Attribute &attr) entering... "<< endl;
	*attr_integrationTime_read = _integration_time;
	attr.set_value(attr_integrationTime_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_integrationTime
// 
// description : 	Write integrationTime attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_integrationTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_integrationTime(Tango::WAttribute &attr) entering... "<< endl;
	attr.get_write_value(attr_integrationTime_write);
	_integration_time = attr_integrationTime_write;
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_timingType
// 
// description : 	Extract real attribute values for timingType acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_timingType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_timingType(Tango::Attribute &attr) entering... "<< endl;
	if(_live_time) {
		*attr_timingType_read = 0;
	} else {
		*attr_timingType_read = 1;
	}
	attr.set_value(attr_timingType_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_timingType
// 
// description : 	Write timingType attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_timingType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_timingType(Tango::WAttribute &attr) entering... "<< endl;
	attr.get_write_value(attr_timingType_write);
	if(attr_timingType_write==0) {
		_live_time = true;
	} else {
		_live_time = false;
	}
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_dataSource
// 
// description : 	Extract real attribute values for dataSource acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_dataSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_dataSource(Tango::Attribute &attr) entering... "<< endl;
	attr.set_value(attr_dataSource_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_deadTime
// 
// description : 	Extract real attribute values for deadTime acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_deadTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_deadTime(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	double dead = _mca->get_dead_time();
	*attr_deadTime_read = dead;
	attr.set_value(attr_deadTime_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_countRate
// 
// description : 	Extract real attribute values for countRate acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_countRate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_countRate(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	double count = _mca->get_input_count_rate();
	*attr_countRate_read = count;
	attr.set_value(attr_countRate_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_realTime
// 
// description : 	Extract real attribute values for realTime acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_realTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_realTime(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	double real = _mca->get_elapsed_acquisition_real_time();
	*attr_realTime_read = real;
	attr.set_value(attr_realTime_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_liveTime
// 
// description : 	Extract real attribute values for liveTime acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_liveTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_liveTime(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	double live = _mca->get_elapsed_acquisition_live_time();
	*attr_liveTime_read = live;
	attr.set_value(attr_liveTime_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roisStartsEnds
// 
// description : 	Extract real attribute values for roisStartsEnds acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roisStartsEnds(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roisStartsEnds(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	long ttl,atom,low_chan,high_chan;
	std::string name;
	for(long i=0; i<NB_MAX_ROI; i++) {
		ttl = i+1;
		if(is_ROI_configured(ttl)) {
			_mca->roi_get_parameters(ttl, atom, name, low_chan, high_chan);
			attr_roisStartsEnds_read[2*i] = get_energy_from_channel(low_chan);
			attr_roisStartsEnds_read[2*i+1] = get_energy_from_channel(high_chan);
		} else {
			attr_roisStartsEnds_read[2*i] = 0;
			attr_roisStartsEnds_read[2*i+1] = 0;
		}
	}
	attr.set_value(attr_roisStartsEnds_read,2*NB_MAX_ROI);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roisStarts
// 
// description : 	Extract real attribute values for roisStarts acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roisStarts(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roisStarts(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	long ttl,atom,low_chan,high_chan;
	std::string name;
	for(long i=0; i<NB_MAX_ROI; i++) {
		ttl = i+1;
		if(is_ROI_configured(ttl)) {
			_mca->roi_get_parameters(ttl, atom, name, low_chan, high_chan);
			attr_roisStarts_read[i] = get_energy_from_channel(low_chan);
		} else {
			attr_roisStarts_read[i] = 0;
		}
	}
	attr.set_value(attr_roisStarts_read,NB_MAX_ROI);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roisEnds
// 
// description : 	Extract real attribute values for roisEnds acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roisEnds(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roisEnds(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	long ttl,atom,low_chan,high_chan;
	std::string name;
	for(long i=0; i<NB_MAX_ROI; i++) {
		ttl = i+1;
		if(is_ROI_configured(ttl)) {
			_mca->roi_get_parameters(ttl, atom, name, low_chan, high_chan);
			attr_roisEnds_read[i] = get_energy_from_channel(high_chan);
		} else {
			attr_roisEnds_read[i] = 0;
		}
	}
	attr.set_value(attr_roisEnds_read,NB_MAX_ROI);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_cycleTime
// 
// description : 	Extract real attribute values for cycleTime acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_cycleTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_cycleTime(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	double cycle = _mca->get_cycle_time();
	*attr_cycleTime_read = cycle;
	attr.set_value(attr_cycleTime_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_cycleTime
// 
// description : 	Write cycleTime attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_cycleTime(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_cycleTime(Tango::WAttribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	attr.get_write_value(attr_cycleTime_write);		
	_mca->set_cycle_time(attr_cycleTime_write);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_detectorTemperature
// 
// description : 	Extract real attribute values for detectorTemperature acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_detectorTemperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_detectorTemperature(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	double temp = _mca->get_detector_temperature();
	*attr_detectorTemperature_read = temp;
	attr.set_value(attr_detectorTemperature_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_energyRange
// 
// description : 	Extract real attribute values for energyRange acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_energyRange(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_energyRange(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	
	long energy = _mca->retreive_energy_range();
	*attr_energyRange_read = energy;
	attr.set_value(attr_energyRange_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::write_energyRange
// 
// description : 	Write energyRange attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Rontec::write_energyRange(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Rontec::write_energyRange(Tango::WAttribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	attr.get_write_value(attr_energyRange_write);
	
	_mca->set_energy_range(attr_energyRange_write);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_offsetGain
// 
// description : 	Extract real attribute values for offsetGain acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_offsetGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_offsetGain(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");

	long roffset,rgain;
		
	_mca->retreive_offset_gain(roffset,rgain);
	double offset = -roffset * rgain / 1000000.0;
	double gain = rgain / 10000.0;
	attr_offsetGain_read[0] = offset;
	attr_offsetGain_read[1] = gain;
	attr.set_value(attr_offsetGain_read,2);
}
//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi1
// 
// description : 	Extract real attribute values for roi1 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi1(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(1) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi1_read) = _mca->roi_get_count(1);
	attr.set_value(attr_roi1_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi2
// 
// description : 	Extract real attribute values for roi2 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi2(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi2(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(2) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi2_read) = _mca->roi_get_count(2);
	attr.set_value(attr_roi2_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi3
// 
// description : 	Extract real attribute values for roi3 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi3(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi3(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(3) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi3_read) = _mca->roi_get_count(3);
	attr.set_value(attr_roi3_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi4
// 
// description : 	Extract real attribute values for roi4 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi4(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi4(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(4) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi4_read) = _mca->roi_get_count(4);
	attr.set_value(attr_roi4_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi5
// 
// description : 	Extract real attribute values for roi5 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi5(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi5(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(5) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi5_read) = _mca->roi_get_count(5);
	attr.set_value(attr_roi5_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi6
// 
// description : 	Extract real attribute values for roi6 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi6(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi6(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(6) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi6_read) = _mca->roi_get_count(6);
	attr.set_value(attr_roi6_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi7
// 
// description : 	Extract real attribute values for roi7 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi7(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi7(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(7) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi7_read) = _mca->roi_get_count(7);
	attr.set_value(attr_roi7_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Rontec::read_roi8
// 
// description : 	Extract real attribute values for roi8 acquisition result.
//
//-----------------------------------------------------------------------------
void Rontec::read_roi8(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Rontec::read_roi8(Tango::Attribute &attr) entering... "<< endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	if(!is_ROI_configured(8) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::read_roi(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::get_roi_count");

	}
	*(attr_roi8_read) = _mca->roi_get_count(8);
	attr.set_value(attr_roi8_read);
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::start
 *
 *	description:	method to execute "Start"
 *	starts a acquisition previously configured with attributes startingChannel, endingChannel, integrationTime
 *	for time given in integrationTime
 *	clears memory in the MCA if not done.
 *	for continuous acquisition : integrationTime=0
 *
 *
 */
//+------------------------------------------------------------------
void Rontec::start()
{
	DEBUG_STREAM << "Rontec::start(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	// clear the spectrum memory buffer in the RONTEC
	_mca->clear();
	// start acquisition
	_mca->start_acquisition(_integration_time,_live_time,_start_reading_thread);
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::get_part_of_spectrum
 *
 *	description:	method to execute "GetPartOfSpectrum"
 *	returns the data starting at argin[0] (exception if argin[0] < starting channel cofigured
 *	for argin[1] channel truncated if exceeds the end_channel configured
 *
 * @param	argin	[0]starting channel, [1] size of channel
 * @return	the data 
 *
 */
//+------------------------------------------------------------------
Tango::DevVarLongArray *Rontec::get_part_of_spectrum(const Tango::DevVarDoubleArray *argin)
{
	Tango::DevVarLongArray	*argout  = new Tango::DevVarLongArray();
	long len = argin->length();
	long start = 0;
	long end = 0;
	long size = 0;
	if(len==2) {
		start = get_channel_from_energy((*argin)[0]);
		end = get_channel_from_energy((*argin)[1]);
		if(start<end)
			size = end - start;
		else
			size = 0;
	}
	if(start<0 || size<=0) {
		ERROR_STREAM	<< "DATA_OUT_OF_RANGE Rontec::get_part_of_spectrum() must provide [0] : start channel, [1] : size " << endl;
		Tango::Except::throw_exception (
				(const char *)"DATA_OUT_OF_RANGE",
				(const char *)" must provide [0] : start channel, [1] : size ",
				(const char *)"Rontec::get_part_of_spectrum");
	}

	unsigned long* data = new unsigned long[size];

	if(_mca->is_reading_thread_running()) {
		 // get part of last read spectrum
		_mca->get_spectrum(data,start,size);
	}
	else {
		 // read part of spectrum
		_mca->read_spectrum(data,start,size);
	}

	argout->length(size);
	for(long i=0; i<size; i++) {
		(*argout)[i] = data[i];
	}
	delete [] data;
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::reset
 *
 *	description:	method to execute "Reset"
 *
 * @return	string returend by the rontec
 *
 */
//+------------------------------------------------------------------
Tango::DevString Rontec::reset()
{
	Tango::DevString	argout;
	DEBUG_STREAM << "Rontec::reset(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	Tango::ConstDevString resp;
	resp = _mca->reset();
	_mca->init(); 
	argout = CORBA::string_dup(resp);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::get_speed_and_resolution_configuration
 *
 *	description:	method to execute "GetSpeedAndResolutionConfiguration"
 *	returns the processor configured :
 *	0 : max cps 1 : ... cps 2 : ..... cps 3 : min cps
 *
 * @return	processor number actually selected
 *
 */
//+------------------------------------------------------------------
Tango::DevLong Rontec::get_speed_and_resolution_configuration()
{
	Tango::DevLong	argout;
	DEBUG_STREAM << "Rontec::get_speed_and_resolution_configuration(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	argout = _mca->get_filter_setting();

	if(energyMode
	&& argout < energyCoeff0.size()
	&& argout < energyCoeff1.size()
	&& argout < energyCoeff2.size()) {
		_coeff0 = energyCoeff0[argout];
		_coeff1 = energyCoeff1[argout];
		_coeff2 = energyCoeff2[argout];
	}
	else {
		_coeff0 = 0.0;
		_coeff1 = 0.0;
		_coeff2 = 0.0;
	}

	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::set_speed_and_resolution_configuration
 *
 *	description:	method to execute "SetSpeedAndResolutionConfiguration"
 *	selects the processor
 *	0 : max cps ...... 3 : min cps
 *	depends on real hardware
 *	exception if error
 *
 * @param	argin	the processor selected 0..3
 *
 */
//+------------------------------------------------------------------
void Rontec::set_speed_and_resolution_configuration(Tango::DevLong argin)
{
	DEBUG_STREAM << "Rontec::set_speed_and_resolution_configuration(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	_mca->set_filter_setting(argin);
	// update energy coefficients
	if(energyMode)
		get_speed_and_resolution_configuration();
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::get_pause_status
 *
 *	description:	method to execute "GetPauseStatus"
 *	returns PAUSE or RUNNING according to acquisition stopped or running
 *
 * @return	PAUSE/RUNNING
 *
 */
//+------------------------------------------------------------------
Tango::DevString Rontec::get_pause_status()
{
	Tango::DevString	argout;
	DEBUG_STREAM << "Rontec::get_pause_status(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	std::string tmp;
	//	Add your own code to control device here
	tmp = _mca->get_pause_status();
	argout = CORBA::string_dup(tmp.c_str());
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method: Rontec::is_ROI_configured
 *
 *	description:	internal method
 *	controls if ttl output number in argin is configured in connectedROIMask property
 *
 * @return	true if configured
 *
 */
//+------------------------------------------------------------------

bool Rontec::is_ROI_configured(long ttl_number)
{
	std::istringstream iss(connectedROIMask);
	long connected_num;
	bool found = false;
	while(iss >> connected_num && !found) {
		found = (connected_num == ttl_number);
	}
	return found;
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::send_rontec_message
 *
 *	description:	method to execute "SendRontecMessage"
 *
 * @param	argin	the command and arguments to be sent
 * @return	the rontec answer as string
 *
 */
//+------------------------------------------------------------------
Tango::DevString Rontec::send_rontec_message(Tango::DevString argin)
{
	Tango::DevString	argout;
	DEBUG_STREAM << "Rontec::send_rontec_message(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	std::string command = argin;
	std::string response ;
	response = _mca->ascii_command(command);
	argout = CORBA::string_dup(response.c_str());
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::abort
 *
 *	description:	method to execute "Abort"
 *	stops acquisition already running
 *
 *
 */
//+------------------------------------------------------------------
void Rontec::abort()
{
	DEBUG_STREAM << "Rontec::abort(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	_mca->pause();
	// restart a paused spectrum acquisition thread
		/*
	if( !spectrum_reader->is_paused())
			spectrum_reader->pause();
			*/
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::arm
 *
 *	description:	method to execute "Arm"
 *	will Arm the MCA (ie prepare the MCA).
 *
 *
 */
//+------------------------------------------------------------------
void Rontec::arm()
{
	DEBUG_STREAM << "Rontec::arm(): entering... !" << endl;
	DEBUG_STREAM << "Not yet implemented" << endl;
	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::clear_data
 *
 *	description:	method to execute "ClearData"
 *	clears the acquisition memory
 *
 *
 */
//+------------------------------------------------------------------
void Rontec::clear_data()
{
	DEBUG_STREAM << "Rontec::clear_data(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	_mca->clear();
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::set_rois
 *
 *	description:	method to execute "SetROIs"
 *	Set the ROIs. the parameter is an array with values going by pair: tab[0]=126, tab[1]=238 -> first ROI starts from 126, ends to 238 tab[2]=1569,tab[3]=2368 -> second ROI starts from 1569, ends to 2368.
 *
 * @param	argin	starts and ends of the ROI. eg: tab[0]=126, tab[1]=238, tab[2]=1569,tab[3]=2368
 *
 */
//+------------------------------------------------------------------
void Rontec::set_rois(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "Rontec::set_rois(): entering... !" << endl;
	//	Add your own code to control device here
	long nb_args = argin->length();
	if(nb_args % 2 != 0 || nb_args / 2 > NB_MAX_ROI) {
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::set_rois(): wrong argin length" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)"wrong argin length",
			(const char *)"Rontec::set_rois");
	}
	for(long i=0; i<nb_args / 2; i++) {
		long ttl = i+1;
		if(is_ROI_configured(ttl)) {			
			long atom = 1;
			std::string name = "NO";
			long start = get_channel_from_energy((*argin)[2*i]);
			long end = get_channel_from_energy((*argin)[2*i+1]);
			_mca->roi_set_parameters(ttl, atom, name, start, end);
		}
	}
}

//+------------------------------------------------------------------
/**
 *	method:	Rontec::set_single_roi
 *
 *	description:	method to execute "SetSingleROI"
 *	configures the TTL output number for pulse output photons processed with
 *	low_channel < energy < high_channel
 *	the RONTEC waits for energy so we retreive energy in DServer from channel and MaxFluoEnergy
 *	channels are retreived according amplifier and energy calibration.
 *	not alowed if acquisition is running
 *	Exception if ROI number not in the ConnectedROIMask property
 *
 * @param	argin	[0] : TTL output number, [1] low energy (eV), [2] high energy (eV)
 *
 */
//+------------------------------------------------------------------
void Rontec::set_single_roi(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "Rontec::set_single_roi(): entering... !" << endl;
	if(!_mca) Tango::Except::throw_exception((const char *)"OPERATION_NOT_ALLOWED",(const char *)"The _mca object is not initialized!",(const char *)"_mca check");
	//	Add your own code to control device here
	long ttl = (*argin)[0];
	if(!is_ROI_configured(ttl) )
	{
		ERROR_STREAM << "DATA_OUT_OF_RANGE Rontec::set_roiparameters(): ttl output number not configured in property" << endl;
		Tango::Except::throw_exception (
			(const char *)"DATA_OUT_OF_RANGE",
			(const char *)" ttl output number not configured in property ",
			(const char *)"Rontec::set_roiparameters");

	}
	// enough arguments?
	long len = argin->length();
	if(len < 3 )
	{
		ERROR_STREAM	<< "DATA_OUT_OF_RANGE Rontec::set_roiparameters() must provide [0] : ttl outmut number, [1] : start channel, [2] : end channel	" << endl;
		Tango::Except::throw_exception (
				(const char *)"DATA_OUT_OF_RANGE",
				(const char *)" must provide [0] : ttl outmut number, [1] : start channel, [2] : end channel",
				(const char *)"Rontec::set_roiparameters");
	}
	long atom = 1;
	std::string name = "NO";
	long start = get_channel_from_energy((*argin)[1]);
	long end = get_channel_from_energy((*argin)[2]);
	_mca->roi_set_parameters(ttl, atom, name, start, end);
}

double Rontec::get_energy_from_channel(long channel) {
	double x = channel;
	if(!energyMode) {
		return x;
	}
	else {
		if(_coeff0==0.0 && _coeff1==0.0 && _coeff2==0.0) {
			Tango::Except::throw_exception (
				(const char *)"DEVICE_ERROR",
				(const char *)"Energy coefficient properties are not properly defined for current selected speed and resolution configuration.",
				(const char *)"Rontec::get_energy_from_channel");
		}
		return x*x*_coeff2 + x*_coeff1 + _coeff0;
	}
}

long Rontec::get_channel_from_energy(double energy) {
	if(!energyMode) {
		return (long) energy;
	}
	else {
		if(_coeff0==0.0 && _coeff1==0.0 && _coeff2==0.0) {
			Tango::Except::throw_exception (
				(const char *)"DEVICE_ERROR",
				(const char *)"Energy coefficient properties are not properly defined for current selected speed and resolution configuration.",
				(const char *)"Rontec::get_channel_from_energy");
		}
		long best = 0;
		long min = 0;
		long max = 0;
		double min_val = get_energy_from_channel(min);
		double max_val = get_energy_from_channel(max);
		double best_val = get_energy_from_channel(best);

		for(long i=1; i<numberOfChannels; ++i) {
			double test = get_energy_from_channel(i);
			if(test<min_val) {
				min = i;
				min_val = test;
			}
			if(test>max_val) {
				max = i;
				max_val = test;
			}
			if(fabs(energy-test)<fabs(energy-best_val)) {
				best = i;
				best_val = test;
			}
		}

		if(best_val<min_val || best_val>max_val) {
			ostringstream err;
			err << "Energy is not in valid range [" << min_val << ";" << max_val << "]";
			Tango::Except::throw_exception (
				(const char *)"DATA_OUT_OF_RANGE",
				(const char *)err.str().c_str(),
				(const char *)"Rontec::get_channel_from_energy");
		}
		return best;
	}
}

}	//	namespace
