//=============================================================================
//
// file : 			 Rontec.h
//
// description : Include for the Rontec class.
//
// project :	RRontec
//
// $Author: syldup $
//
// $Revision: 1.1.1.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.1  2005/09/09 15:38:21  coquet
// initial import, tested with real hardware.
// Raw version, a lot of functions are not implemented ( hard-coded ) but DS is usable
//
//
// copyleft : 	 European Synchrotron Radiation Facility
//							 BP 220, Grenoble 38043
//							 FRANCE
//
//=============================================================================
//
//			This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//				 (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _RONTEC_H
#define _RONTEC_H

#include <tango.h>
#include <DeviceProxyHelper.h>
#include <RontecMcaImplementation.h>
#include <readingthread.h>

//using namespace Tango;

/**
 * @author	$Author: syldup $
 * @version $Revision: 1.1.1.1 $
 */

 // Add your own constants definitions here.
 //-----------------------------------------------


namespace Rontec_ns
{

/**
 * Class Description:
 * handles Rontec MCA channel analyser through a serail RS232 line
 */

/*
 *	Device States Description:
 *	Tango::OFF :	RONTEC OK, ready to accept command
 *	Tango::RUNNING :	acquisition in progress
 *	Tango::FAULT :	command error
 *	Tango::UNKNOWN :	communication loosed with RONTEC
 */


class Rontec: public Tango::Device_3Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//------------------------------------------------------------- 
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_fluoSpectrum_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	baud rate set on the RONTEC
 *	Default is 38400 ( firmware default )
 *	to set another baud rate :
 *	set on the RONTEC a new baudrate, write it on the flash,
 *	then update the property with the new value
 *	restart SerialLine the Rontec DServers
 *	possible values : 600, 1200, 1800, 2400, 3600, 4800, 7200, 9600, 14400,
 *	19200, 28800, 38400, 57600, 76800, 115200, 230400.
 */
	Tango::DevLong	baud;
/**
 *	Tango name of the serial line device
 *	the other serial line properties are fixed for the RONTEC RCL :
 *	N( no parity),8( data bits),1(stop bit), hardware handshake ( RTS/CTS
 */
	string	serialLineUrl;
/**
 *	list of the TTL outputs connected to a counter
 *	just for control and throw exception if try to configure a ROI that is not in the list
 *	8 TTL outputs are available with the current RONTEC MCA hardware
 *	example : 1 4 represents : ouptut1, output 4 connected
 *	default : 1
 */
	string	connectedROIMask;
/**
 *	number of channels of the MCA.
 *	The current RONTEC MCA hardware has 4096 channels.
 *	this is for extentions purpose only,
 *	let the default value of 4096
 */
	Tango::DevLong	numberOfChannels;
/**
 *	maximum fluo energy of the last MCA channel.
 *	with the current RONTEC MCA Hardware can be 10, 20, 40, or 80 KeV
 *	default : 80.0
 */
	Tango::DevDouble	maxFluoEnergy;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	Rontec(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device Name
 */
	Rontec(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl Class.
 *	@param s	Device name
 *	@param d	Device description.
 */
	Rontec(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */ 
	~Rontec() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name Rontec methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for fluoSpectrum acquisition result.
 */
	virtual void read_fluoSpectrum(Tango::Attribute &attr);
/**
 *	Read/Write allowed for fluoSpectrum attribute.
 */
	virtual bool is_fluoSpectrum_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetStartingChannel command.
 */
	virtual bool is_SetStartingChannel_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetEndingChannel command.
 */
	virtual bool is_SetEndingChannel_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSpectrumLimits command.
 */
	virtual bool is_GetSpectrumLimits_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetSpeedAndResolutionConfiguration command.
 */
	virtual bool is_GetSpeedAndResolutionConfiguration_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetSpeedAndResolutionConfiguration command.
 */
	virtual bool is_SetSpeedAndResolutionConfiguration_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetRemainingAcquisitionTime command.
 */
	virtual bool is_GetRemainingAcquisitionTime_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetROIParameters command.
 */
	virtual bool is_SetROIParameters_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetROIParameters command.
 */
	virtual bool is_GetROIParameters_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetRoiCount command.
 */
	virtual bool is_GetRoiCount_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Clear command.
 */
	virtual bool is_Clear_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for InitSerialLine command.
 */
	virtual bool is_InitSerialLine_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetDetectorTemperature command.
 */
	virtual bool is_GetDetectorTemperature_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetInputCountRate command.
 */
	virtual bool is_GetInputCountRate_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetOutputCountRate command.
 */
	virtual bool is_GetOutputCountRate_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetDeadTime command.
 */
	virtual bool is_GetDeadTime_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetCycleTime command.
 */
	virtual bool is_GetCycleTime_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetPartOfSpectrum command.
 */
	virtual bool is_GetPartOfSpectrum_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetEnergyRange command.
 */
	virtual bool is_GetEnergyRange_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetOffsetGain command.
 */
	virtual bool is_GetOffsetGain_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetPauseStatus command.
 */
	virtual bool is_GetPauseStatus_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetReadSize command.
 */
	virtual bool is_SetReadSize_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetAcquisitionTime command.
 */
	virtual bool is_GetAcquisitionTime_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetEnergyRange command.
 */
	virtual bool is_SetEnergyRange_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SendRontecMessage command.
 */
	virtual bool is_SendRontecMessage_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState dev_state();
/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *	@return Status descrition
 *	@exception DevFailed
 */
	virtual Tango::ConstDevString dev_status();
/**
 * starts a acquisition previously configured with SetStartingChannel, SetEndingChannel
 *	for time given in argin
 *	clears memory in the MCA if not done.
 *	for continuous acquisition : argin = 0
 *	@param	argin time in sec.ms
 *	@exception DevFailed
 */
	void	start(Tango::DevFloat);
/**
 * stops acquisition already running
 *	@exception DevFailed
 */
	void	stop();
/**
 * sets the starting channel of the spectrum to be read.
 *	@param	argin first channel of the spectrum to be read
 *	@exception DevFailed
 */
	void	set_starting_channel(Tango::DevLong);
/**
 * sets the last spectrum channel to be returned by the rontec
 *	must be <= NumberOfChannels property
 *	@param	argin last channel to be returned
 *	@exception DevFailed
 */
	void	set_ending_channel(Tango::DevLong);
/**
 * returns in [0] the starting channel,
 *	in [1] the ending channnel
 *	as configured previously with SetStartingChannel, SetEndingChannel
 *	@return the low and high spectrum limits
 *	@exception DevFailed
 */
	Tango::DevVarLongArray	*get_spectrum_limits();
/**
 * returns the processor configured :
 *	0 : max cps 1 : ... cps 2 : ..... cps 3 : min cps
 *	@return processor number actually selected
 *	@exception DevFailed
 */
	Tango::DevLong	get_speed_and_resolution_configuration();
/**
 * selects the processor
 *	0 : max cps ...... 3 : min cps
 *	depends on real hardware
 *	exception if error
 *	@param	argin the processor selected 0..3
 *	@exception DevFailed
 */
	void	set_speed_and_resolution_configuration(Tango::DevLong);
/**
 * returns acquisition time remaining as read on the RONTEC ( $MR
 *	@return acquisition time remainnig 
 *	@exception DevFailed
 */
	Tango::DevDouble	get_remaining_acquisition_time();
/**
 * configures the TTL output number for pulse output photons processed with
 *	low_channel < energy < high_channel
 *	the RONTEC waits for energy so we retreive energy in DServer from channel and MaxFluoEnergy
 *	channels are retreived according amplifier and energy calibration.
 *	not alowed if acquisition is running
 *	Exception if ROI number not in the ConnectedROIMask property
 *	@param	argin [0] : TTL output number, [1] low channel, [2] high channel
 *	@exception DevFailed
 */
	void	set_roiparameters(const Tango::DevVarLongArray *);
/**
 * returns the ROI output channel number parameters
 *	returns
 *	[0] = TTL output number
 *	[1] = low channel number
 *	[2] = high channel number
 *	according to the hardware parameters : max channel energy, offset an gain calibration
 *	not allowed if acquisition is running
 *	Exception if ROI number not in the ConnectedROIMask property
 *	@param	argin TTL output number
 *	@return TTL output # low channel high channel
 *	@exception DevFailed
 */
	Tango::DevVarLongArray	*get_roiparameters(Tango::DevLong);
/**
 * total counts in te parameterised ROI.
 *	Exception if ROI number not in the ConnectedROIMask property
 *	response is delayed when acquisition is running
 *	@param	argin TTL output number
 *	@return counts accumulated from starting
 *	@exception DevFailed
 */
	Tango::DevLong	get_roi_count(Tango::DevLong);
/**
 * 
 *	@return string returend by the rontec
 *	@exception DevFailed
 */
	Tango::DevString	reset();
/**
 * clears the acquisition memory
 *	@exception DevFailed
 */
	void	clear();
/**
 * 
 *	@exception DevFailed
 */
	void	init_serial_line();
/**
 * 
 *	@return 
 *	@exception DevFailed
 */
	Tango::DevFloat get_detector_temperature();
/**
 * 
 *	@return the input count rate
 *	@exception DevFailed
 */
	Tango::DevLong	get_input_count_rate();
/**
 * 
 *	@return the output count rate
 *	@exception DevFailed
 */
	Tango::DevLong	get_output_count_rate();
/**
 * 
 *	@return the dead time ( % of non-processed counts )
 *	@exception DevFailed
 */
	Tango::DevFloat get_dead_time();
/**
 * returns the cycle time for input and outputs
 *	@return the cycle time in ms
 *	@exception DevFailed
 */
	Tango::DevLong	get_cycle_time();
/**
 * returns the data starting at argin[0] (exception if argin[0] < starting channel cofigured
 *	for argin[1] channel truncated if exceeds the end_channel configured
 *	@param	argin [0]starting channel, [1] size of channel
 *	@return the data 
 *	@exception DevFailed
 */
	Tango::DevVarLongArray	*get_part_of_spectrum(const Tango::DevVarLongArray *);
/**
 * returns the energy range read from the RONTEC, in eV
 *	@return the energy range in eV
 *	@exception DevFailed
 */
	Tango::DevLong	get_energy_range();
/**
 * returns the raw values of offset an gain as read in the RONTEC
 *	@return [0] the offset, [1] the gain
 *	@exception DevFailed
 */
	Tango::DevVarLongArray	*get_offset_gain();
/**
 * returns PAUSE or RUNNING according to acquisition stopped or running
 *	@return PAUSE/RUNNING
 *	@exception DevFailed
 */
	Tango::DevString	get_pause_status();
/**
 * for the readin thread ,
 *	the number of channels to read in 1 shoot on the RONTEC MCA.
 *	low number increases the speed of reading.
 *	@param	argin size to read in 1 shoot
 *	@exception DevFailed
 */
	void	set_read_size(Tango::DevLong);
/**
 * returns the time spent in the current acquisition
 *	@return time in sec of the current acquisition
 *	@exception DevFailed
 */
	Tango::DevDouble	get_acquisition_time();
/**
 * 
 *	@param	argin energy 10000 or 20000 or 40000 or 80000
 *	@exception DevFailed
 */
	void	set_energy_range(Tango::DevLong);
/**
 * 
 *	@param	argin the command and arguments to be sent
 *	@return the rontec answer as string
 *	@exception DevFailed
 */
	Tango::DevString	send_rontec_message(Tango::DevString);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------



protected :
	//	Add your own data members here
	//-----------------------------------------
	// writes back the write part of attribute
	template<class T> write_wattribute(Tango::DevString attribute_name, T value)
	{
		Tango::WAttribute &att = dev_attr->get_w_attr_by_name(attribute_name);
		att.set_write_value(value);
	}
	bool is_ROI_configured(long ttl_number);
	bool _serial_line_initialised;
	// le DS est pret a fonctionner : toutes les classes ont ete creees
	bool init_rontec_done;
	bool init_thread_done;
	Tango::DeviceProxyHelper* _serialProxy_helper;

	// Rontec MCA implementation class
	RontecMcaImplementation * mca;


	long acquisition_start_channel;
	long acquisition_end_channel;


	// for spectrum attribute
	#define MAX_CHANNELS_POSSIBLE 4096
	long spectrum_data[MAX_CHANNELS_POSSIBLE];
	// mutex utilise dans  ReadingThread et dans	le DS Rontec dans chaque commande
	// mutex de d'interverrouillage entre des commandes et le thread de mise a jour du spectre en cours d'acquisition
	omni_mutex serial_access;

	// thread d'acquisition du spectre en continu
	readingthread * spectrum_reader; 

	std::string status_str;


};




} // namespace

#endif	// _RONTEC_H
